/**\n * eBay Endpoint Authentication Bypass Test\n * \n * This test specifically checks if the eBay endpoint properly bypasses\n * authentication middleware that might be causing 401 errors.\n */\n\nimport { test } from 'node:test';\nimport assert from 'node:assert';\nimport http from 'http';\n\n// Test the authentication bypass\ntest('eBay endpoint should bypass authentication', async (t) => {\n    const testCases = [\n        {\n            name: 'POST without any auth headers',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'User-Agent': 'eBay-Test'\n            },\n            body: JSON.stringify({\n                metadata: { topic: \"MARKETPLACE_ACCOUNT_DELETION\" },\n                notification: {\n                    notificationId: \"test123\",\n                    eventDate: new Date().toISOString(),\n                    publishDate: new Date().toISOString(),\n                    publishAttemptCount: 1,\n                    data: {\n                        username: \"testuser\",\n                        userId: \"testid\",\n                        eiasToken: \"testtoken\"\n                    }\n                }\n            })\n        },\n        {\n            name: 'GET challenge without auth',\n            method: 'GET',\n            path: '/api/partsmatrix?challenge_code=test123',\n            headers: {\n                'User-Agent': 'eBay-Test'\n            }\n        },\n        {\n            name: 'GET health check without auth',\n            method: 'GET',\n            path: '/api/partsmatrix/health',\n            headers: {\n                'User-Agent': 'eBay-Test'\n            }\n        }\n    ];\n\n    for (const testCase of testCases) {\n        await t.test(testCase.name, async () => {\n            const options = {\n                hostname: 'localhost',\n                port: 3000,\n                path: testCase.path || '/api/partsmatrix',\n                method: testCase.method,\n                headers: testCase.headers\n            };\n\n            const response = await makeHttpRequest(options, testCase.body);\n            \n            // Should NOT return 401 Unauthorized\n            assert.notStrictEqual(response.statusCode, 401, \n                `eBay endpoint returned 401 for ${testCase.name}. This indicates auth middleware is interfering.`);\n            \n            console.log(`âœ… ${testCase.name}: Status ${response.statusCode} (not 401)`);\n        });\n    }\n});\n\nfunction makeHttpRequest(options, postData) {\n    return new Promise((resolve, reject) => {\n        const req = http.request(options, (res) => {\n            let data = '';\n            res.on('data', chunk => data += chunk);\n            res.on('end', () => resolve({ \n                statusCode: res.statusCode, \n                headers: res.headers, \n                body: data \n            }));\n        });\n\n        req.on('error', reject);\n\n        if (postData) {\n            req.write(postData);\n        }\n        \n        req.end();\n    });\n}\n\nconsole.log('ðŸ§ª Running eBay authentication bypass tests...');\nconsole.log('Make sure your server is running on localhost:3000');\n