#!/usr/bin/env node\n\n/**\n * eBay Public Key Fetcher\n * \n * This script fetches eBay's current public keys for JWT signature verification\n * from their JWKS (JSON Web Key Set) endpoint.\n */\n\nimport https from 'https';\nimport crypto from 'crypto';\n\n// eBay's JWKS endpoints\nconst EBAY_JWKS_ENDPOINTS = {\n    production: 'https://apiz.ebay.com/jwks',\n    sandbox: 'https://api.sandbox.ebay.com/jwks'\n};\n\n/**\n * Fetch JWKS from eBay\n */\nfunction fetchJWKS(url) {\n    return new Promise((resolve, reject) => {\n        const req = https.get(url, (res) => {\n            let data = '';\n            res.on('data', chunk => data += chunk);\n            res.on('end', () => {\n                try {\n                    const jwks = JSON.parse(data);\n                    resolve(jwks);\n                } catch (error) {\n                    reject(new Error(`Failed to parse JWKS: ${error.message}`));\n                }\n            });\n        });\n        \n        req.on('error', reject);\n        req.setTimeout(10000, () => {\n            req.abort();\n            reject(new Error('Request timeout'));\n        });\n    });\n}\n\n/**\n * Convert JWK to PEM format\n */\nfunction jwkToPem(jwk) {\n    try {\n        if (jwk.kty === 'EC') {\n            // ECDSA key\n            const x = Buffer.from(jwk.x, 'base64url');\n            const y = Buffer.from(jwk.y, 'base64url');\n            \n            // Create the public key in DER format\n            // This is a simplified version - for production, use a proper JWK to PEM library\n            const publicKeyDer = Buffer.concat([\n                Buffer.from('3059301306072a8648ce3d020106082a8648ce3d030107034200', 'hex'),\n                Buffer.from('04', 'hex'),\n                x,\n                y\n            ]);\n            \n            const publicKeyPem = \n                '-----BEGIN PUBLIC KEY-----\\n' +\n                publicKeyDer.toString('base64').match(/.{1,64}/g).join('\\n') +\n                '\\n-----END PUBLIC KEY-----';\n                \n            return publicKeyPem;\n        } else if (jwk.kty === 'RSA') {\n            // RSA key - would need different handling\n            console.log('RSA key detected - this implementation focuses on ECDSA');\n            return null;\n        }\n        \n        return null;\n    } catch (error) {\n        console.error('Error converting JWK to PEM:', error.message);\n        return null;\n    }\n}\n\n/**\n * Main function to fetch and process eBay public keys\n */\nasync function fetchEbayPublicKeys() {\n    console.log('\ud83d\udd0d Fetching eBay public keys for JWT verification...');\n    console.log('=' * 60);\n    \n    const results = {};\n    \n    for (const [environment, url] of Object.entries(EBAY_JWKS_ENDPOINTS)) {\n        console.log(`\\n\ud83c\udf0d Fetching ${environment} keys from: ${url}`);\n        \n        try {\n            const jwks = await fetchJWKS(url);\n            console.log(`\u2705 Successfully fetched JWKS for ${environment}`);\n            console.log(`\ud83d\udd11 Found ${jwks.keys?.length || 0} keys`);\n            \n            if (jwks.keys && jwks.keys.length > 0) {\n                results[environment] = [];\n                \n                jwks.keys.forEach((key, index) => {\n                    console.log(`\\n\ud83d\udd0d Key ${index + 1}:`);\n                    console.log(`  - Key ID (kid): ${key.kid || 'N/A'}`);\n                    console.log(`  - Key Type (kty): ${key.kty}`);\n                    console.log(`  - Algorithm (alg): ${key.alg || 'N/A'}`);\n                    console.log(`  - Use: ${key.use || 'N/A'}`);\n                    console.log(`  - Curve: ${key.crv || 'N/A'}`);\n                    \n                    if (key.kty === 'EC') {\n                        const pem = jwkToPem(key);\n                        if (pem) {\n                            results[environment].push({\n                                kid: key.kid,\n                                alg: key.alg,\n                                pem: pem\n                            });\n                            console.log(`  \u2705 Converted to PEM format`);\n                        } else {\n                            console.log(`  \u274c Failed to convert to PEM`);\n                        }\n                    } else {\n                        console.log(`  \u26a0\ufe0f Unsupported key type for this implementation`);\n                    }\n                });\n            } else {\n                console.log(`\u26a0\ufe0f No keys found in JWKS for ${environment}`);\n            }\n            \n        } catch (error) {\n            console.error(`\u274c Failed to fetch ${environment} JWKS:`, error.message);\n        }\n    }\n    \n    // Generate code for EbayCompliance.js\n    console.log('\\n' + '=' * 60);\n    console.log('\ud83d\udcdd GENERATED CODE FOR EbayCompliance.js:');\n    console.log('=' * 60);\n    \n    console.log('\\n// eBay public keys for JWT verification (auto-generated)');\n    console.log('const ebayPublicKeys = {');\n    \n    for (const [environment, keys] of Object.entries(results)) {\n        if (keys && keys.length > 0) {\n            keys.forEach(key => {\n                const keyName = `${environment}_${key.kid || 'unknown'}`.replace(/[^a-zA-Z0-9_]/g, '_');\n                console.log(`    '${keyName}': \\`${key.pem}\\`,`);\n                console.log('');\n            });\n        }\n    }\n    \n    console.log('};');\n    \n    console.log('\\n\ud83d\udca1 Usage Notes:');\n    console.log('1. Copy the generated public keys above into your getEbayPublicKey() function');\n    console.log('2. The key IDs from eBay may change, so update this periodically');\n    console.log('3. Test with your actual JWT tokens from eBay to verify the keys work');\n    console.log('4. Consider caching these keys and refreshing them periodically');\n    \n    return results;\n}\n\n// Run the script\nfetchEbayPublicKeys().catch(error => {\n    console.error('\u274c Fatal error:', error.message);\n    process.exit(1);\n});