#!/usr/bin/env node\n\n/**\n * eBay Signature Debug Tool\n * \n * This script helps debug eBay signature verification issues\n * by testing different signature formats and approaches.\n */\n\nimport crypto from 'crypto';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load environment variables\ndotenv.config({ path: path.join(__dirname, '.env') });\n\nconst VERIFICATION_TOKEN = process.env.EBAY_VERIFICATION_TOKEN;\nconst ENDPOINT_URL = process.env.EBAY_ENDPOINT_URL;\n\n// Mock eBay payload (similar to what's being sent)\nconst mockPayload = {\n    metadata: {\n        topic: \"MARKETPLACE_ACCOUNT_DELETION\",\n        schemaVersion: \"1.0\",\n        deprecated: false\n    },\n    notification: {\n        notificationId: \"test_notification_\" + Date.now(),\n        eventDate: new Date().toISOString(),\n        publishDate: new Date().toISOString(),\n        publishAttemptCount: 1,\n        data: {\n            username: \"test_user\",\n            userId: \"test_user_id\",\n            eiasToken: \"test_eias_token\"\n        }\n    }\n};\n\nconsole.log('üîç eBay Signature Debug Tool');\nconsole.log('=' * 50);\nconsole.log('Configuration:');\nconsole.log(`- Verification Token: ${VERIFICATION_TOKEN ? 'SET' : 'MISSING'}`);\nconsole.log(`- Endpoint URL: ${ENDPOINT_URL}`);\nconsole.log('');\n\nif (!VERIFICATION_TOKEN) {\n    console.error('‚ùå EBAY_VERIFICATION_TOKEN not found in environment variables');\n    process.exit(1);\n}\n\n// Test different signature generation methods\nfunction testSignatureGeneration() {\n    console.log('üß™ Testing different signature generation methods:');\n    console.log('');\n    \n    const timestamp = Date.now().toString();\n    const payloadString = JSON.stringify(mockPayload);\n    \n    console.log(`Timestamp: ${timestamp}`);\n    console.log(`Payload length: ${payloadString.length}`);\n    console.log(`Payload preview: ${payloadString.substring(0, 100)}...`);\n    console.log('');\n    \n    // Method 1: timestamp.payload (eBay's documented format)\n    const message1 = timestamp + '.' + payloadString;\n    const signature1 = crypto.createHmac('sha256', VERIFICATION_TOKEN)\n        .update(message1, 'utf8')\n        .digest('hex');\n    \n    console.log('Method 1 (timestamp.payload):');\n    console.log(`- Message: ${message1.substring(0, 100)}...`);\n    console.log(`- Signature: ${signature1}`);\n    console.log(`- Signature length: ${signature1.length}`);\n    console.log('');\n    \n    // Method 2: Just payload (some webhooks use this)\n    const signature2 = crypto.createHmac('sha256', VERIFICATION_TOKEN)\n        .update(payloadString, 'utf8')\n        .digest('hex');\n    \n    console.log('Method 2 (payload only):');\n    console.log(`- Message: ${payloadString.substring(0, 100)}...`);\n    console.log(`- Signature: ${signature2}`);\n    console.log(`- Signature length: ${signature2.length}`);\n    console.log('');\n    \n    // Method 3: URL + payload (some services use this)\n    const message3 = ENDPOINT_URL + payloadString;\n    const signature3 = crypto.createHmac('sha256', VERIFICATION_TOKEN)\n        .update(message3, 'utf8')\n        .digest('hex');\n    \n    console.log('Method 3 (URL + payload):');\n    console.log(`- Message: ${message3.substring(0, 100)}...`);\n    console.log(`- Signature: ${signature3}`);\n    console.log(`- Signature length: ${signature3.length}`);\n    console.log('');\n    \n    // Method 4: Base64 encoding\n    const signature4 = crypto.createHmac('sha256', VERIFICATION_TOKEN)\n        .update(message1, 'utf8')\n        .digest('base64');\n    \n    console.log('Method 4 (timestamp.payload, base64):');\n    console.log(`- Signature: ${signature4}`);\n    console.log(`- Signature length: ${signature4.length}`);\n    console.log('');\n    \n    return {\n        timestamp,\n        signatures: {\n            method1: signature1,\n            method2: signature2, \n            method3: signature3,\n            method4: signature4\n        }\n    };\n}\n\n// Test signature verification with different formats\nfunction testSignatureVerification(testSig, timestamp) {\n    console.log('üîç Testing signature verification with different input formats:');\n    console.log('');\n    \n    const payloadString = JSON.stringify(mockPayload);\n    \n    // Test various signature formats that eBay might send\n    const testFormats = [\n        { name: 'Plain hex', sig: testSig },\n        { name: 'With sha256= prefix', sig: 'sha256=' + testSig },\n        { name: 'Uppercase hex', sig: testSig.toUpperCase() },\n        { name: 'With SHA256= prefix (uppercase)', sig: 'SHA256=' + testSig },\n    ];\n    \n    testFormats.forEach(format => {\n        try {\n            const cleanSig = format.sig.replace(/^sha256=/i, '');\n            \n            const message = timestamp + '.' + payloadString;\n            const expectedSig = crypto.createHmac('sha256', VERIFICATION_TOKEN)\n                .update(message, 'utf8')\n                .digest('hex');\n            \n            const receivedBuffer = Buffer.from(cleanSig, 'hex');\n            const expectedBuffer = Buffer.from(expectedSig, 'hex');\n            \n            const isValid = crypto.timingSafeEqual(receivedBuffer, expectedBuffer);\n            \n            console.log(`${format.name}:`);\n            console.log(`  - Original: ${format.sig.substring(0, 30)}...`);\n            console.log(`  - Cleaned: ${cleanSig.substring(0, 30)}...`);\n            console.log(`  - Length: ${cleanSig.length}`);\n            console.log(`  - Valid: ${isValid ? '‚úÖ' : '‚ùå'}`);\n            console.log('');\n            \n        } catch (error) {\n            console.log(`${format.name}: ‚ùå Error - ${error.message}`);\n            console.log('');\n        }\n    });\n}\n\n// Main execution\nconst result = testSignatureGeneration();\ntestSignatureVerification(result.signatures.method1, result.timestamp);\n\nconsole.log('üí° Debugging Tips:');\nconsole.log('1. Check eBay Developer Portal for exact signature format documentation');\nconsole.log('2. Compare actual eBay signature with generated signatures above');\nconsole.log('3. Verify the X-EBAY-TIMESTAMP format (Unix timestamp vs ISO string)');\nconsole.log('4. Check if eBay uses URL-encoding for the payload');\nconsole.log('5. Verify the verification token is correct in eBay Developer Portal');\nconsole.log('');\nconsole.log('üìù Next Steps:');\nconsole.log('- Compare these signatures with what eBay actually sends');\nconsole.log('- Check server logs for actual signature values');\nconsole.log('- Test with eBay\\'s signature verification tool if available');